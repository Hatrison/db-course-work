(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{487:function(n,e,r){"use strict";r.r(e);var s=r(13),t=Object(s.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"реалізація-інформаціиного-та-програмного-забезпечення"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#реалізація-інформаціиного-та-програмного-забезпечення"}},[n._v("#")]),n._v(" Реалізація інформаційного та програмного забезпечення")]),n._v(" "),e("p",[n._v("В рамках проекту розроблюється:")]),n._v(" "),e("h2",{attrs:{id:"sql-скрипт"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql-скрипт"}},[n._v("#")]),n._v(" SQL-скрипт")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("-- MySQL Script generated by MySQL Workbench\n-- Sun Dec 25 07:19:21 2022\n-- Model: New Model    Version: 1.0\n-- MySQL Workbench Forward Engineering\n\nSET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;\nSET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;\nSET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\n\n-- -----------------------------------------------------\n-- Schema mydb\n-- -----------------------------------------------------\nDROP SCHEMA IF EXISTS `mydb` ;\n\n-- -----------------------------------------------------\n-- Schema mydb\n-- -----------------------------------------------------\nCREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;\nUSE `mydb` ;\n\n-- -----------------------------------------------------\n-- Table `mydb`.`answer`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`answer` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`answer` (\n  `user_id` INT NOT NULL,\n  `text` TEXT NOT NULL,\n  `data` DATE NOT NULL,\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `answer_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_selectedOption_id_idx` (`answer_id` ASC) VISIBLE,\n  INDEX `fk_user_id_idx` (`user_id` ASC) VISIBLE,\n  CONSTRAINT `fk_selectedOption_id`\n    FOREIGN KEY (`answer_id`)\n    REFERENCES `mydb`.`selectedOption` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_user_id`\n    FOREIGN KEY (`user_id`)\n    REFERENCES `mydb`.`user` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION);\n\n\n-- -----------------------------------------------------\n-- Table `mydb`.`category`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`category` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`category` (\n  `category_id` INT NOT NULL,\n  `name` VARCHAR(255) NOT NULL,\n  PRIMARY KEY (`category_id`));\n\n\n-- -----------------------------------------------------\n-- Table `mydb`.`option`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`option` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`option` (\n  `type` TEXT(255) NOT NULL,\n  `text` TEXT(255) NOT NULL,\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `question_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_question_id_idx` (`question_id` ASC) VISIBLE,\n  CONSTRAINT `fk_question_id`\n    FOREIGN KEY (`question_id`)\n    REFERENCES `mydb`.`question` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION);\n\n\n-- -----------------------------------------------------\n-- Table `mydb`.`question`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`question` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`question` (\n  `type` TEXT(255) NOT NULL,\n  `text` TEXT(255) NOT NULL,\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `topic` TEXT(255) NOT NULL,\n  `quiz_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_quiz_id_idx` (`quiz_id` ASC) VISIBLE,\n  CONSTRAINT `fk_quiz_id`\n    FOREIGN KEY (`quiz_id`)\n    REFERENCES `mydb`.`quiz` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION);\n\n\n-- -----------------------------------------------------\n-- Table `mydb`.`quiz`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`quiz` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`quiz` (\n  `type` TEXT(255) NOT NULL,\n  `text` TEXT(255) NOT NULL,\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `topic` TEXT(255) NOT NULL,\n  `date` DATETIME NOT NULL,\n  `creator_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_creator_id_idx` (`creator_id` ASC) VISIBLE,\n  CONSTRAINT `fk_creator_id`\n    FOREIGN KEY (`creator_id`)\n    REFERENCES `mydb`.`user` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION);\n\n\n-- -----------------------------------------------------\n-- Table `mydb`.`selectedOption`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`selectedOption` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`selectedOption` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `option_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_option_id_idx` (`option_id` ASC) VISIBLE,\n  CONSTRAINT `fk_option_id`\n    FOREIGN KEY (`option_id`)\n    REFERENCES `mydb`.`option` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION);\n\n\n-- -----------------------------------------------------\n-- Table `mydb`.`user`\n-- -----------------------------------------------------\nDROP TABLE IF EXISTS `mydb`.`user` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`user` (\n  `username` VARCHAR(16) NOT NULL,\n  `mail` VARCHAR(255) NOT NULL,\n  `id` INT NOT NULL AUTO_INCREMENT,\n  PRIMARY KEY (`id`));\n\n\nSET SQL_MODE=@OLD_SQL_MODE;\nSET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;\nSET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;\n")])])]),e("h2",{attrs:{id:"rest-full-сервіс-для-управління-даними"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest-full-сервіс-для-управління-даними"}},[n._v("#")]),n._v(" REST-full сервіс для управління даними")]),n._v(" "),e("h3",{attrs:{id:"фаил-підключення-до-бази-данних"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#фаил-підключення-до-бази-данних"}},[n._v("#")]),n._v(" Файл підключення до бази данних")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('const mysql = require("mysql2");\n\nconst connection = mysql.createConnection({\n  host: "localhost",\n  user: "root",\n  password: "root123",\n  database: "mydb",\n});\n\nconnection.connect((err) => {\n  if (err) console.log("Not connected :(");\n  else console.log("Connected successfully!");\n});\n\nmodule.exports = connection;\n')])])]),e("h3",{attrs:{id:"кореневии-фаил-серверу"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#кореневии-фаил-серверу"}},[n._v("#")]),n._v(" Кореневий файл серверу")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('const express = require("express");\nconst bodyParser = require("body-parser");\nconst connection = require("./database");\n\nconst app = express();\nconst port = process.env.PORT || 8080;\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\nconst routes = require("./routes");\nroutes(app);\n\napp.listen(port, () => {\n  console.log(`App listen on port ${port}`);\n});\n')])])]),e("h3",{attrs:{id:"фаил-роутера"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#фаил-роутера"}},[n._v("#")]),n._v(" Файл роутера")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('"use strict";\n\nmodule.exports = (app) => {\n  const users = require("./controller");\n\n  app.route("/users").get(users.getAll);\n  app.route("/user/:id").get(users.get);\n  app.route("/users/add").post(users.add);\n  app.route("/user/:id").patch(users.update);\n  app.route("/user/:id").delete(users.delete);\n};\n')])])]),e("h3",{attrs:{id:"фаил-обробників-запитів"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#фаил-обробників-запитів"}},[n._v("#")]),n._v(" Файл обробників запитів")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('"use strict";\n\nconst db = require("./database");\n\nexports.getAll = (req, res) => {\n  const query = `SELECT * FROM user`;\n  db.query(query, (err, result) => {\n    if (err) return res.status(500).json(err);\n    if (result.length === 0) return res.sendStatus(404);\n    res.status(200).json(result);\n  });\n};\n\nexports.get = (req, res) => {\n  const query = `SELECT * FROM user WHERE id=${req.params.id}`;\n  db.query(query, (err, result) => {\n    if (err) return res.status(500).json(err);\n    if (result.length === 0) return res.sendStatus(404);\n    res.status(200).json(result[0]);\n  });\n};\n\nexports.add = (req, res) => {\n  const { username, mail, id } = req.body;\n  if (!(username && mail && id))\n    return res\n      .status(400)\n      .json({ message: "Username, mail and id are required" });\n  db.query(`SELECT * FROM user WHERE id=${id}`, (err, result) => {\n    if (err) return res.status(500).json(err);\n    if (result.length !== 0)\n      return res.status(404).json(`User with id ${id} exists`);\n    const query =\n      "INSERT INTO `user`(`username`, `mail`, `id`) VALUES(\'" +\n      username +\n      "\', \'" +\n      mail +\n      "\', \'" +\n      id +\n      "\')";\n    db.query(query, (err, result) => {\n      if (err) return res.status(500).json(err);\n      res.status(201).json(`User with id ${id} was created`);\n    });\n  });\n};\n\nexports.update = (req, res) => {\n  const { id } = req.params;\n  const { username, mail } = req.body;\n  if (!(username || mail))\n    return res.status(400).json({ message: "Required username or mail" });\n  db.query(`SELECT * FROM user WHERE id=${id}`, (err, result) => {\n    if (err) return res.status(500).json(err);\n    if (result.length === 0)\n      return res.status(404).json("No user with this id");\n  });\n  let query = "";\n  if (username) {\n    query = `UPDATE user SET username=\'${username}\' WHERE id=${id}`;\n    db.query(query, (err) => {\n      if (err) return res.status(500).json(err);\n    });\n  }\n  if (mail) {\n    query = `UPDATE user SET username=\'${mail}\' WHERE id=${id}`;\n    db.query(query, (err) => {\n      if (err) return res.status(500).json(err);\n    });\n  }\n  res.status(200).json({ message: `User with id ${id} was updated` });\n};\n\nexports.delete = (req, res) => {\n  const { id } = req.params;\n  if (!id) return res.status(400).json({ message: "Id required" });\n  const query = `DELETE FROM user WHERE id=${id}`;\n  db.query(`SELECT * FROM user WHERE id=${id}`, (err, result) => {\n    if (err) return res.status(500).json(err);\n    if (result.length === 0)\n      return res.status(404).json("No user with this id");\n    db.query(query, (err, result) => {\n      if (err) return res.status(500).json(err);\n      res.status(200).json(`User with id ${id} was deleted`);\n    });\n  });\n};\n')])])])])}),[],!1,null,null,null);e.default=t.exports}}]);